#!/usr/bin/env python3

import codecs
import sys
import io
import regex
from prettytable import PrettyTable

MAX_COL = 5 # maximum number of columns in each table displayed on one line
# offset for SQL Batch packets with Data field instead of Query
DATA_OFF = len('0000  11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11   ')

# splits the given list into smaller lists of max size n
# this is used to display large response tables with many columns on multiple lines
def split_list(l, n):
    out = []
    i = 0
    while i < len(l):
        if i + n > len(l):
            out.append(l[i:])
        else:
            out.append(l[i:i+n])
        i += n
    return out

# takes in one packet of the tshark hex output and extracts the ascii
def hex_to_ascii(s):
    out = ''
    for r in s.split('\n'):
        out += r[DATA_OFF:]
    return out

# gets the ascii of all of the packet info from the tshark hex file
def ascii_file(f):
    pkts = f.read().split('\n\n')
    out = ''
    for p in pkts:
        # extract ascii from each packet then terminate with '\n\n'
        out += hex_to_ascii(p) + '\n\n'
    return out

if __name__ == '__main__':
    with open('out.txt', 'r') as f1:
        with open('dump.txt', 'r') as f2:
            data = f1.read().split('Frame ') # split into frames
            dump = ascii_file(f2)
            idx = 0 # idx into dump
            # for each packet
            for d in data:
                if 'Type: SQL batch' in d: # SQL Batch frame
                    query = None
                    matches = regex.findall(r'Query: (.+)\n', d)
                    if len(matches) == 1:
                        query = matches[0]
                        query = query.replace('\\r\\n', '\n')
                    else: # query has been truncated
                        matches = regex.findall(r'Query \[truncated\]: (.+)\n', d)
                        if len(matches) == 1:
                            # format query (needs extra replaces for trailing/partial \r\n
                            query = matches[0].replace('\\r\\n', '..')
                            query = query.replace('\\r\\', '..')
                            query = query.replace('\\r', '')
                            if query[len(query)-1] == '\\': query = query[:len(query)-1]
                            # look for query in dump
                            tmp = dump.find(query, idx)
                            if tmp < 0:
                                print('[Truncated]', end=' ')
                            else:
                                idx = tmp
                                # search for the time stamp to mark the end of the query
                                search = regex.search(r'\n\n', dump[idx:])
                                if search == None:
                                    print('[Truncated]', end=' ')
                                else:
                                    end_idx = search.start() + idx - 1
                                    query = dump[idx:end_idx].replace('..', '\n')
                                    if query[len(query)-1] == '.': query = query[:len(query)-1]
                                    idx = end_idx
                        else: # check if Data packet
                            matches = regex.search(r'Data \(\d+ bytes\)\s+(.+\n)+\s+Data: ', d)
                            if matches != None:
                                query = ''
                                for m in matches.captures(1):
                                    query += m[DATA_OFF:len(m) - 1]
                                query = query.replace('..', '\n')
                    
                    if query != None and len(query) > 0:
                        query = query.rstrip('\n')
                        print('SQL Batch:\n' + query + '\n')
                    else:
                        print('SQL Batch: Invalid\n')
                
                elif 'Type: Response': # Response frame
                    tokens = d.split('Token - ')
                    is_data = False
                    pts = [] # list of pretty tables, needed for lots of columns
                    cols = 0
                    for t in tokens:
                        if t.startswith('ColName'):
                            names = regex.findall(r'Column \d+ ?\(?(\w*)\)?', t)
                            cols = len(names)
                            if cols != 0: # does not print responses with 0 columns
                                print('Response:')
                                is_data = True
                                # split into multiple pretty tables
                                split_cols = split_list(names, MAX_COL)
                                for l in split_cols:
                                    pt = PrettyTable()
                                    pt.field_names = l
                                    pts.append(pt)
                        if is_data and t.startswith('Row'):
                            fields = t.split('Field ') # split row into fields
                            fields.pop(0) # get rid of 'Row' before first field
                            for i in range(0, len(fields)):
                                f = fields[i]
                                d = regex.findall(r'Data: (.*)', f)
                                if len(d) == 1: # if there is data, use it
                                    fields[i] = d[0].replace('\\', '')
                                else: fields[i] = '' # else report '' as data
                            if len(fields) == cols: 
                                # split row into multiple pretty tables
                                split_fields = split_list(fields, MAX_COL)
                                for i in range(0, len(split_fields)):
                                    pts[i].add_row(split_fields[i])
                            else: print('Invalid row found')
                    if is_data:
                        for pt in pts:
                            print(pt, end='\n\n')
